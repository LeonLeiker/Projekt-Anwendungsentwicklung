Anforderungen
1. Funktionale Anforderungen
1.1 Allgemeine Funktionen
- Die Anwendung muss eine grafische Benutzeroberfläche (GUI) besitzen.
- Die detaillierten Anforderungen, das Design und die Bedienung der Oberfläche werden gemeinsam mit dem Auftraggeber abgestimmt.

1.2 Client-Server-Architektur
- Die Software wird in einer Client-Server-Architektur umgesetzt.
- Der Client kann entweder eine Desktop-Anwendung oder eine Web-Anwendung sein.
- Der Server wird in einem oder mehreren Containern ausgeführt.

1.3 Stationensuche und Auswahl
- Benutzer können eine Wetterstation durch Angabe geografischer Koordinaten (Länge und Breite) suchen und auswählen.
- Die nächstgelegenen Stationen innerhalb eines konfigurierbaren Suchradius werden angezeigt.
- Der Suchradius und die maximale Anzahl angezeigter Stationen sind anpassbar.
- Ein Zeitfenster (Jahre) kann angegeben werden, in dem Daten für die ausgewählte Station vorliegen müssen.

1.4 Datenanzeige
- Für eine ausgewählte Wetterstation sollen die Daten im angegebenen Zeitfenster dargestellt werden:
    - Jährliche Mittelwerte für Temperaturminima und -maxima (grafisch und/oder tabellarisch).
    - Jährliche Mittelwerte der Temperaturminima und -maxima innerhalb der meteorologischen Jahreszeiten (grafisch und/oder tabellarisch).

2. Nicht-funktionale Anforderungen
2.1 Systemanforderungen
- Die Anwendung muss unter Windows 11 lauffähig sein.
- Optionale Unterstützung für Windows Subsystem for Linux (WSL).

2.2 Datenquellen
- Die Software nutzt die Rohdaten des Daily Global Historical Climatology Network (GHCN):
    - Daten von weltweit verteilten Wetterstationen.
    - URL der Datenquelle: https://www1.ncdc.noaa.gov/pub/data/ghcn/daily/.

2.3 Code
- Freie Wahl der Programmiersprachen und Frameworks.
- Testautomatisierung:
    - Unit- und Service-Tests, Test-Driven Development (TDD) wird empfohlen.
    - Testabdeckung sollte über 80 % liegen.
- Systemtests:
    - Manuelle oder automatisierte Systemtests sollen durchgeführt werden.
- Strukturierung der Services:
    - Es wird eine Schichtenarchitektur empfohlen.
- Serviceschnittstellen:
    - Schnittstellen sollen im REST-Format erstellt werden.
    - Absicherung der Schnittstellen ist optional.
- Datenbank:
    - Der Einsatz einer Datenbank ist optional, jedoch ist eine begründete Wahl erforderlich.
    - Die Datenbank darf maximal 5 GB Hauptspeicher einnehmen.

2.4 Betrieb und Deployment
- Containerisierung:
    - Es soll Docker oder Podman verwendet werden.
    - Ein Container darf maximal 2 CPUs und 1 GB RAM nutzen.
- Orchestrierung:
    - Zur Orchestrierung mehrerer Container soll Docker Compose** oder Podman Compose** genutzt werden.

2.5 DevOps
- Versionskontrolle:
    - Verwendung von GitHub zur Versionskontrolle.
    - Das GitHub-Repository soll öffentlich sein oder die Dozenten müssen in ein privates Repository eingeladen werden.
- Continuous Integration/Continuous Deployment (CI/CD):
    - CI/CD-Pipelines sollen mit GitHub Actions umgesetzt werden.
- Container-Images:
    - Veröffentlichung der Container-Images in der GitHub Container Registry.

2.6 Erweiterbarkeit und Benutzerfreundlichkeit
- Die Architektur sollte so gestaltet sein, dass **zukünftige Erweiterungen einfach möglich sind.
- Die GUI muss intuitiv und leicht bedienbar sein, mit klar verständlichen Funktionen und Eingabehilfen. Nicht-funktionale Anforderungen**
